service:
  name: serverless-videographer-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    VIDEOGRAPHERS_TABLE: Videographers-${self:provider.stage}
    VIDEOS_TABLE: Videos-${self:provider.stage}
    EMAIL_SUBSCRIBER_TABLE: Subscribers-${self:provider.stage}
    VIDEOS_S3_BUCKET: serverless-videogapher-videos-bucket-${self:provider.stage}
    PROFILE_PIC_S3_BUCKET: serverless-videographer-profile-pic-bucket-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-videographer-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    VIDEO_ID_INDEX: VideoIdIndex


custom:
  topicName: emailsTopic-${self:provider.stage}

  serverless-offline:
    port: 3003

  dynamodb:
    stages: 
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Videographer Portfolio Api
        description: Serverless application for sharing videographer videos

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetVideographers:
    handler: src/lambda/http/getVideographers.handler
    events: 
      - http: 
          method: get
          path: videographers
          cors: true
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOGRAPHERS_TABLE}
  
  GetVideographer:
    handler: src/lambda/http/getVideographer.handler
    events: 
      - http: 
          method: get
          path: videographers/{videographerId}
          cors: true
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOGRAPHERS_TABLE}
  
  UpdateVideographer:
    handler: src/lambda/http/updateVideographer.handler
    events: 
      - http: 
          method: patch
          path: videographers/
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOGRAPHERS_TABLE}

  AddProfilePicture:
    handler: src/lambda/http/addProfilePicture.handler
    events:
      - http:
          method: post
          cors: true
          path: videographers/{videographerId}/profilePicture
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOGRAPHERS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.PROFILE_PIC_S3_BUCKET}/*
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"    

  GetVideo:
    handler: src/lambda/http/getVideo.handler
    events:
      - http:
          method: get
          path: videos/{videoId}
          corst: true
          documentation:
            summary: Get a single video
            description: Gets a single video from a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEO_ID_INDEX}

  GetVideos:
    handler: src/lambda/http/getVideos.handler
    events:
      - http:
          method: get
          path: videographers/{videographerId}/videos
          cors: true
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOGRAPHERS_TABLE}
        
  AddVideo: 
    handler: src/lambda/http/addVideo.handler
    events:
      - http:
          method: post
          path: videographers/{videographerId}/videos
          cors: true
          authorizer: Auth
          documentation:
            summary: Add a new video
            description: Add a new video to a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
  
  EditVideo: 
    handler: src/lambda/http/editVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Edit a video
            description: Add a video in a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*
      - Effect: Allow
        Action: 
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}

  DeleteVideo: 
    handler: src/lambda/http/deleteVideo.handler
    events:
      - http:
          method: delete
          path: videographers/{videographerId}/videos/{videoUrl}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete a video
            description: Delete a video from a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*
      - Effect: Allow
        Action: 
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}

  SendNotifications:
    environment: 
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow 
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: 'arn:aws:execute-api:*:*:*/dev/POST/@connections/*'

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow 
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow 
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  SendNewVideoNotificationEmail:
    handler: src/lambda/dynamodb/newVideoNotification.handler
    iamRoleStatementsName: newVideoNotificationRole
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt VideosDynamoDBTable.StreamArn
          maximumRetryAttempts: 4
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOGRAPHERS_TABLE}
  
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    VideographersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEOGRAPHERS_TABLE}

    EmailSubscribersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: subscriberEmail
            AttributeType: S
          - AttributeName: videographerId
            AttributeType: S
        KeySchema:
          - AttributeName: videographerId
            KeyType: HASH
          - AttributeName: subscriberEmail
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EMAIL_SUBSCRIBER_TABLE}

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    VideosBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.VIDEOS_S3_BUCKET}
        NotificationConfiguration: 
          TopicConfigurations: 
          - Event: s3:ObjectCreated:*
            Topic: !Ref VideosTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ProfilePicBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PROFILE_PIC_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*'
        Bucket: !Ref VideosBucket
        
    ProfilePicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PROFILE_PIC_S3_BUCKET}/*'
        Bucket: !Ref ProfilePicBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref VideosTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}
        Topics:
          - !Ref VideosTopic    

    SendNotificationsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendNotificationsLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}

    VideosTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Videos topic
        TopicName: ${self:custom.topicName}

    VideosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: videographerId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: videographerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.VIDEO_ID_INDEX}
            KeySchema:
            - AttributeName: id
              KeyType: HASH
            Projection: 
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEOS_TABLE}

